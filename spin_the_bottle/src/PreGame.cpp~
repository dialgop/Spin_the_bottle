/********************************************************************
 * SPIN THE BOTTLE GAME: By Diego Alejandro Gómez Pardo.		 	*
 *																 	*
 *  Laboratory in Humanoid Robotics								 	*
 *  Humanoid Robots Group										 	*
 *  Computer Siences Department 4								 	*
 *	Rheinische Friedrich Wilhelms Universität Bonn				 	*
 *																 	*
 *	Pregame class: This class contains all the methods of the game 	*
 *	previous to start the normal flow of it (methods detect bottle 	*
 *	and detect movement)											*
 *******************************************************************/

#include "../include/bottle_recognition/PreGame.h"
using namespace cv;
using namespace std;

// Maximum threshold of movement acceptable to say that the bottle is not moving
int movementThreshold = 500;
int detectionThreshold = 70;

// Values to define if there is no bottle in the field of view or if a part of it is missing.
int bottleThreshold = 200;
int bottleIncomplete = 20;

//Constructor of the Pregame class
PreGame::PreGame(Mat &src)
{
}

//Function to get the channel of green values in a 1 channel image.

Mat PreGame::getSaturationChannelValues(Mat matrixReaded)
{
	Mat imageHSV;

	//Converts image into HSV

	cvtColor(matrixReaded,imageHSV,CV_BGR2HSV);

	//To divide the image into its 3 channels (We will use Saturation)

	Mat channels[3];

	split(imageHSV,channels);

	/* To invert the image in order to make threshold later
	 * (Threshold cuts higher values) and important values are
	 * white (255) here
	 */

	//For S Channel

	Mat invertedImageS;

	bitwise_not ( channels[1], invertedImageS );

	//Removes the edges of the platform

	for (int i = 0; i < invertedImageS.rows ; i++)
	{
		for (int j = 0; j < invertedImageS.cols ; j++)
		{
			if(!((i>invertedImageS.rows/4) && (j>invertedImageS.cols/6 && j<invertedImageS.cols*5/6)))
			{
				invertedImageS.at<uchar>(i, j) = 255;
			}
		}
	}

	//Applies threshold taking into account dark pixels (values from 0 to 70) in S and V channel

	Mat thresholdImgS;

	threshold(invertedImageS, thresholdImgS, detectionThreshold,255,THRESH_BINARY_INV);

	Mat thresholdImgV;

	threshold(channels[2], thresholdImgV, detectionThreshold ,255,THRESH_BINARY_INV);

	Mat output = thresholdImgS.mul(thresholdImgV);
	Mat auxiliarOutput = output.clone();

	//Fills the inner parts of the bottle before returning value

	vector<vector<Point> > contours;

	// Despite hierarchy is not used here, it establishes the mode of the contour retrieval
	// algorithm. Since external is used, then just the most external contours are passed into
	// the hierarchy (not the ones contained inside the contours).

	vector<Vec4i> hierarchy;

	findContours( output, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE, Point(0, 0) );

	//Merge all contours into a vector

	std::vector<cv::Point> merged_contour_points;

	for (size_t i = 0; i < contours.size(); i++) {
		for (size_t j = 0; j < contours[i].size(); j++)
		{
			merged_contour_points.push_back(contours[i][j]);
		}
	}

	// Gets the hull points which represent the extreme salient parts of the bottle

	std::vector<cv::Point> hull;
	cv::convexHull(cv::Mat(merged_contour_points),hull, false);
	cv::Mat hull_points(hull);

	//Fills the Bottle inside, this is the one which will be used in order to get orientation

	fillConvexPoly(output,hull_points,Scalar(255));

	return output;
}

/*method to detect if a bottle is put in the robot field of view
 * It is being done calculating the zero pixels seen in the image.
*/

int PreGame::BottleDetected(Mat &src)
{
	//Calls the method getSaturationChannelValues

	Mat binaryImage = getSaturationChannelValues(src);

	int count;

	//Counts nonzero values

	for (int i = 0; i < binaryImage.rows ; i++)
	{
		for (int j = 0; j < binaryImage.cols ; j++)
		{
			if(binaryImage.at<uchar>(i, j) == 255)
			{
				count++;
			}
		}
	}

//	This was a trial to increase or decrease threshold based on light conditions
//	do
//	{
//		int count = countNonZero(binaryImage);
//
//		if(count < 200 && detectionThreshold < 256)
//		{
//			detectionThreshold++;
//			binaryImage = getSaturationChannelValues(src);
//			count = countNonZero(binaryImage);
//			cout << " Increasing threshold to value pixels in case there is bottle: " << count << endl;
//		}
////		else if(count > 1500 && detectionThreshold > 0)
////		{
////			detectionThreshold--;
////			binaryImage = getSaturationChannelValues(src);
////			count = countNonZero(binaryImage);
////		}
//	}while(count<150 && detectionThreshold > 0);


	cout << "count of pixels in BottleDetection (detectionThresh=90): " << count << endl;

	//Checks if image is showing a bottle or has already started.

	if(count > bottleThreshold && count != 307200)
		return 0;
	else
	{
		if(count == 307200)
		{
			cout << " starting the game please wait for a moment" << endl;
			return 3;
		}
		if(count <bottleThreshold && count > bottleIncomplete)
		{
			cout << " Please move the bottle more to the center (200>pixels>20) " << count << endl;
			return 1;
		}
		else
		{
			cout << "It seems not to be a bottle here " << count<<endl;
			return 2;
		}
	}
}

/* Method to detect if there is movement detected in the field of view of the robot
 * This is done making a subtraction of the values of current and previous frame.
*/

bool PreGame::MovementDetected(Mat &src1, Mat &src2)
{
	Mat imageBinary1 = getSaturationChannelValues(src1);
	Mat imageBinary2 = getSaturationChannelValues(src2);

	Mat binaryResults = Mat::zeros(imageBinary1.size(), CV_8UC1);

	for (int i = 0; i < binaryResults.rows ; i++)
	{
		for (int j = 0; j < binaryResults.cols ; j++)
		{
			binaryResults.at<uchar>(i, j) = abs(imageBinary1.at<uchar>(i, j) - imageBinary2.at<uchar>(i, j));
		}
	}

	int difPixelscounter=0;

	for (int i = 0; i < binaryResults.rows ; i++)
	{
		for (int j = 0; j < binaryResults.cols ; j++)
		{
			if(binaryResults.at<uchar>(i, j) == 255)
			{
				difPixelscounter++;
			}
		}
	}

	int numberBin1 = countNonZero(imageBinary1);
	int numberBin2 = countNonZero(imageBinary2);

	cout<< "# bin1: " << numberBin1 << " # bin2: " << numberBin2 << endl;

	cout<<"The number of pixels that are not zero is "<<difPixelscounter <<endl;

	// If the difference of pixels counted is bigger than the threshold
	// of movement, then it must be moving still, otherwise it has stopped
	// and will allow the robot to do the bottle pointing.

	if(difPixelscounter > numberBin1/3)
	{
		cout << "probably the bottle is making movements" << endl;
		return true;
	}
	else
	{
		cout <<" the bottle is not moving" << endl;
		return false;
	}
}
