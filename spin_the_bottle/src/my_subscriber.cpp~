/*****************************************************************
 * SPIN THE BOTTLE GAME: By Diego Alejandro Gómez Pardo.		 *
 *																 *
 *  Laboratory in Humanoid Robotics								 *
 *  Humanoid Robots Group										 *
 *  Computer Siences Department 4								 *
 *	Rheinische Friedrich Wilhelms Universität Bonn				 *
 *																 *
 *	Subscriber node: This is a ROS node which contains the main  *
 *	flow of activities required to play the spin the bottle game *
 *****************************************************************/

// Importing the packages and headers required from ROS, OpenCV, and some C++ classes to work

#include <opencv2/highgui/highgui.hpp>

#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>

#include <actionlib/client/simple_action_client.h>
#include <actionlib/client/terminal_state.h>
#include <naoqi_msgs/JointTrajectoryGoal.h>
#include <naoqi_msgs/JointTrajectoryAction.h>
#include <naoqi_msgs/RunBehaviorAction.h>
#include "FaceDetection.cpp"
#include "ActionClientSay.cpp"

#include "../include/spin_the_bottle/LineProjectionE.h"
#include "../include/spin_the_bottle/WorldCoordinates.h"
#include "../include/spin_the_bottle/PreGame.h"
#include "../include/spin_the_bottle/DetectFace.h"
#include "ActionNaoNeck.cpp"
#include <nao_interaction_msgs/FaceDetected.h>

#include <iostream>
#include <cmath>

using namespace std;
using namespace cv;

/**************************************************************************
 * Global Variables necessary to restart after the loop of the game is    *
 * finished (The loop finishes when someone is asked to spin the bottle)  *
 **************************************************************************/

bool startGame = true;
int impossibleAngle = 0;

//Variables used to control the main flow of the game
int bottleDetected = 2;
bool isAbleToMoveHead = false;


//Variables for movement detection:
Point3d timeBefore, timeAfter;

int variableLight = 50;

int counter=0;
vector <double> pitchAndYaw;
Point2d coordinates;
Mat imageBefore, imageAfter;

bool movementDetected = false;
int counterTimesHead = 0;

int cameraUsed = 1;
vector<ros::Time> timeFaceRecognition; //[0] = initial, [1] = end
bool initialTimeStarted=false;
ac_say::ActionClientSay *AC_SAY;
bool state1M = false;
bool restart = false;
bool firstImage = true;
int counterNoOneChosen = 0;
bool adjustBottleCenter = false;

/*****************************************************************
 * ActionTrajectory methods used in order to make NAO neck move  *
******************************************************************/

// PutHeadDown is the methoid which tells NAO to move its neck in
// order to check at the bottle orientation

naoqi_msgs::JointTrajectoryGoal putHeadDown()
{
    naoqi_msgs::JointTrajectoryGoal goal;
    goal.relative = false;
    goal.trajectory.joint_names.push_back("HeadPitch");
    goal.trajectory.joint_names.push_back("HeadYaw");

    goal.trajectory.points.resize(2);
    int step = 0;

    goal.trajectory.points[step].positions.resize(2);
    goal.trajectory.points[step].positions[0] = 0.075124;
    goal.trajectory.points[step].positions[1] = 0.0137641;
    goal.trajectory.points[step].velocities.resize(2);
    for (size_t j = 0; j < goal.trajectory.joint_names.size(); ++j)
    {
        goal.trajectory.points[step].velocities[j] = 0.0;
    }

    goal.trajectory.points[step].time_from_start = ros::Duration(1);
    ++step;

    goal.trajectory.points[step].positions.resize(2);
    goal.trajectory.points[step].positions[0] = 0.075124;
    goal.trajectory.points[step].positions[1] = 0.0137641;
    goal.trajectory.points[step].velocities.resize(2);
    for (size_t j = 0; j < goal.trajectory.joint_names.size(); ++j)
    {
        goal.trajectory.points[step].velocities[j] = 0.0;
    }

    goal.trajectory.points[step].time_from_start = ros::Duration(1.84);

    return goal;
}

// MoveToAngle is the method which tells NAO to move its neck towards the place where
// bottle is pointing in order to find whether a person has been pointed or not

naoqi_msgs::JointTrajectoryGoal MoveToAngle()
{
    naoqi_msgs::JointTrajectoryGoal goal;
    goal.relative = false;
    goal.trajectory.joint_names.push_back("HeadPitch");
    goal.trajectory.joint_names.push_back("HeadYaw");

    goal.trajectory.points.resize(2);
    int step = 0;
    goal.trajectory.points[step].positions.resize(2);
    goal.trajectory.points[step].positions[1] = 0;

    goal.trajectory.points[step].velocities.resize(2);
    for (size_t j = 0; j < goal.trajectory.joint_names.size(); ++j)
    {
        goal.trajectory.points[step].velocities[j] = 0.0;
    }

    goal.trajectory.points[step].time_from_start = ros::Duration(1 + 0.5);
    ++step;

    goal.trajectory.points[step].positions.resize(2);
    goal.trajectory.points[step].positions[0] = -10.0*(PI/180.0); //pitchAndYaw.at(0)-(PI); // from PI/4:PI/3:PI/2
    goal.trajectory.points[step].positions[1] = pitchAndYaw.at(1)-(PI/2);

    cout << "weird head pose" << pitchAndYaw.at(1) << endl;

    goal.trajectory.points[step].velocities.resize(2);
    for (size_t j = 0; j < goal.trajectory.joint_names.size(); ++j)
    {
        goal.trajectory.points[step].velocities[j] = 0.0;
    }

    goal.trajectory.points[step].time_from_start = ros::Duration(2.50 + 0.5);

    return goal;
}

/*****************************************************************************
 * ImageCallback Method: this is the method where all of the computer vision *
 * methods are going to be executed. E.G detecting bottle, detect faces, etc *
*****************************************************************************/

void imageCallback(const sensor_msgs::ImageConstPtr& msg)
{
	Mat debugPixels;

	//First case if Nao is using its bottom camera

	if(cameraUsed == 1)
	{
		isAbleToMoveHead = false;
		bool between0and180 = false;

		cv::Mat imageWithoutModifications = cv_bridge::toCvShare(msg, "bgr8")->image;
		cv::Mat sourceImage = cv_bridge::toCvShare(msg, "bgr8")->image;

		cout <<"enters here" << endl;

		try
		{
			int countThresholdPixels;

			imshow("view", sourceImage);

			//Creates a pregame Object which contains the methods Bottle detection and movement detection.

			PreGame beforeGame(sourceImage);

			debugPixels = beforeGame.getSaturationChannelValues(sourceImage);
			imshow("Debug-view", debugPixels);

			/*for (int i = 0; i < debugPixels.rows ; i++)
			{
				for (int j = 0; j < debugPixels.cols ; j++)
				{
					if(debugPixels.at<uchar>(i, j) <=variableLight ) //Changes here
					{
						countThresholdPixels++;
					}
				}
			}

			cout << "Pixels counted with value " << variableLight << " : "<< countThresholdPixels << endl;

			if(countThresholdPixels<200)
			{
				variableLight++;
			}*/


			bottleDetected = beforeGame.BottleDetected(sourceImage);

			// First condition of the game: To Detect if a bottle is ready to be used and play.

			if(bottleDetected == 0 && imageWithoutModifications.cols == 320)
			{
				imageAfter = sourceImage;

				// Condition of the game: If the bottle has not been ever moved then the robot should not start playing

				if(firstImage == true)
				{
					imageBefore = sourceImage;
					firstImage = false;
					imshow("view", imageWithoutModifications);
				}

				movementDetected = beforeGame.MovementDetected(imageBefore, imageAfter);

				ROS_INFO_STREAM("movementDetected " << movementDetected);

				imageBefore = imageAfter;

				// Condition of the game: If the bottle starts spinning...!

				if(movementDetected == true)
				{
					//State 1M: The bottle starts just standing, but it is necessary to spin it in order for NAO to start making counts.
					state1M = true;
					ros::Duration(0.1).sleep();
				}

				//Now that bottle is moving, wait until it stops for nao make the respective calculations.

				if(state1M == true && movementDetected == false)
				{
					vector<Point3d> xyangles;
					vector<int> orienting;

					//Create a class called line projection and another one called WorldCoordinates

					LineProjectionE lineProjection(sourceImage);

					/* On the class called line projection, detects
					 * the orientation where the bottle points*/

					orienting = lineProjection.FindPointingArea(sourceImage);

					/* Having obtained the value from the variable called
					 * orienting, makes the projection using a fitEllipse */

					xyangles = lineProjection.drawPointingLine(sourceImage, orienting);

					/* First frame is gotten by xyangle
					* timeBefore in first time is = 0; */

					counter++;

					/* Wait until 10 to make a change on the values (In order to ensure that
					 * movement detection is of the bottle) */

					timeAfter = xyangles.at(0);

					/* Second option to evaluate movement detection. This one ensures that the bottle is not moving.
					 * This to calculate a more exact projecting angle.
					 */

					bool moveDetection;
					//Comparison of angles

					if((timeBefore.x + 5 > timeAfter.x && timeAfter.x > timeBefore.x - 5)
							&& ((timeBefore.y + 5 > timeAfter.y && timeAfter.y > timeBefore.y - 5))
							&& ((timeBefore.z + 2 > timeAfter.z && timeAfter.z > timeBefore.z - 2)))
					{
						moveDetection = false;
					}
					else
					{
						moveDetection = true;
					}

					if(counter == 10)
					{
						timeBefore = timeAfter;
						counter = 0;
					}

					// If the bottle is not moving, then start the calculation of the mapping pixel to world coordinates

					if(moveDetection == false)
					{
						vector<double> centerAndEdgeInWorld;

						WorldCoordinates naoWorldCoordinates(xyangles, sourceImage);

						centerAndEdgeInWorld = naoWorldCoordinates.getWorldCoordinates(xyangles, sourceImage);

						/* First condition: Checks if the pointing of the bottle is in an angle where there is
						 * no one for sure. if it happens, Nao will ask someone to spin the bottle again.
						 */

						if((centerAndEdgeInWorld.at(6) > 205 && centerAndEdgeInWorld.at(6) < 335) && impossibleAngle % 8 == 0)
						{
							AC_SAY->say("sorry but no one is behind me");
							ros::Duration(0.3).sleep();
							AC_SAY->say("Could you please spin the bottle again?");
							impossibleAngle++;
							restart = true; // restart all of the variables of the game in order to restart it.
						}

						/* Second condition: Checks if the bottle is poiting to an unreachable place between
						 * 180°-205° and 335°-360° (Some of these points can be reachable standing on the right position.
						 */

						coordinates = naoWorldCoordinates.getPointingCoordinates(centerAndEdgeInWorld);

						if(coordinates.x != -1 && coordinates.y != -1)
						{
							isAbleToMoveHead = true;
							pitchAndYaw = naoWorldCoordinates.getPitchYawHead(centerAndEdgeInWorld,coordinates);
							//Solving a bug of 90° problem
							cout << "angle to solve bug problem "<< centerAndEdgeInWorld.at(6) << endl;
							if(centerAndEdgeInWorld.at(6)>80.0 && centerAndEdgeInWorld.at(6)<100.0)
							{
								pitchAndYaw.at(1)=PI/2.0;
							}
						}
						else
						{
							isAbleToMoveHead = false;
						}
					}
					cv::imshow("view",sourceImage);
				}
				cv:waitKey(10);

				/* After all of the conditions are filled (Bottle detected, no movement, there is a pitch and yaw angle to
				 * rotate NAO neck, right coordinates are provided and NAO has already processed the change of camera and
				 * resolution, NAO can finally turn its head.
				 */

				if(bottleDetected == 0 && movementDetected == false && pitchAndYaw.size()==2 && counterTimesHead < 1 && isAbleToMoveHead == true)
				{
					// Action client from Nao_pose related to move the robot neck in Yaw and pitch angle.

					counterTimesHead++;
					ROS_INFO("inside action lib move head angle here!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
					actionlib::SimpleActionClient<naoqi_msgs::JointTrajectoryAction>ac("/joint_trajectory", true);
					ROS_INFO("Waiting for action server to start");
					ac.waitForServer();
					ac.sendGoal(MoveToAngle());
					bool finishedBeforeTimeout = ac.waitForResult(ros::Duration(10.0));
					if(finishedBeforeTimeout)
					{
							actionlib::SimpleClientGoalState state = ac.getState();
							ROS_INFO("Action finished: %s", state.toString().c_str());
					}
					else
					{
						ROS_INFO("Action did not finish before the time out.");
					}

					//After NAO is moving his face, camera source and resolution change

					system("rosrun dynamic_reconfigure dynparam set naoqicamera_node \"{'source': 0, 'resolution': 2}\"");
					ros::Duration(1.0).sleep();

					// Variable indicating that now NAO is looking to a person.

					cameraUsed = 0;
				}
			}

			/* Alternative flows from the main one. It contains:
			 *
			 * 1. If the bottle is not completely adjusted to the range of sight of the robot.
			 * 2. If there is no bottle in the game for NAO start playing
			 *
			 * In both results, NAO will ask someone to organize the bottle to the right place.
			 */

			else if(bottleDetected == 1 && adjustBottleCenter==false)
			{
				AC_SAY->say("Remember to adjust the bottle closer to the center!");
				cv::imshow("view",cv_bridge::toCvShare(msg, "bgr8")->image);
				adjustBottleCenter = true;
			}
			else if(bottleDetected == 2 && startGame == true)
			{
				AC_SAY->say("I cannot see any bottle here");
				ros::Duration(0.5).sleep();
				AC_SAY->say("Could you please bring one to play?");
				cv::imshow("view",cv_bridge::toCvShare(msg, "bgr8")->image);
			}
			else if(bottleDetected == 3 && startGame == true)
			{
				AC_SAY->say("Give me one minute please, I am processing some information");
				ros::Duration(0.5).sleep();
				AC_SAY->say("but before, are you sure all of the packages I need are loaded?");
				cv::imshow("view",cv_bridge::toCvShare(msg, "bgr8")->image);
			}

			startGame = false;
		}
		catch (cv_bridge::Exception& e)
		{
			ROS_ERROR("Could not convert from '%s' to 'bgr8'.", msg -> encoding.c_str());
		}
	}
	else //If NAO is using its top camera.
	{
		Mat imageFaces = cv_bridge::toCvShare(msg, "bgr8")->image;
		Mat imageRecognized = cv_bridge::toCvShare(msg, "bgr8")->image;
		cv::imshow("view",cv_bridge::toCvShare(msg, "bgr8")->image);

		//Create a class face detector

		DetectFace faceDetector(imageFaces);

		bool faceDetected = faceDetector.detectAndDisplay(imageFaces);

		//If a face is detected by the robot, it will ask to that person to spin the bottle. The game will restart.

		if(faceDetected == true)
		{
			ROS_INFO_STREAM("Face Detected");
			AC_SAY->say("The bottle pointed at you my friend");
			ros::Duration(0.5).sleep();
			AC_SAY->say("now it is your turn to spin the bottle");
			//ros::Duration(2.0).sleep();
			restart = true;
		}
		else
			//If a face is not detected by the robot after some time, it will ask to anyone to spin the bottle. The game will restart.
		{
			ROS_INFO_STREAM("There is no face to show");
			if(counterNoOneChosen ==0)
			{
				AC_SAY->say("sorry but the bottle pointed to no one");
				ros::Duration(0.25).sleep();
				AC_SAY->say("Can anyone please spin the bottle again?");
			}

			ros::Time timenow = ros::Time::now();

			//A counter to give time to NAO to check if someone was chosen or not.

			counterNoOneChosen++;

			if(initialTimeStarted==false)
			{
				timeFaceRecognition.push_back(timenow);
				initialTimeStarted = true;
			}
			else
			{
				if((timenow.toSec() - timeFaceRecognition[0].toSec()) > 1.)
				{
					ROS_INFO_STREAM("restarting game");
					restart = true;
				}
			}
		}

		/* Game restarts when NAO has either detected a person or has not detected anyone.
		 * All of the variables restart and NAO changes again camera source from top to bottom
		 * and resolution from 640 * 480 to 320 * 240. Additionally, NAO puts its neck down again
		 * To check where the bottle will point.
		 */

		if(restart == true)
		{
			//ros::Duration(1.0).sleep();
			ROS_INFO_STREAM("restarting I am here ...................................................");

			timeBefore.x = 0.0, timeBefore.y = 0.0, timeBefore.z = 0.0;
			timeAfter.x = 0.0, timeAfter.y = 0.0, timeAfter.z = 0.0;
			counter=0;
			pitchAndYaw.clear();
			coordinates.x = 0.0, coordinates.y = 0.0;
			bottleDetected = 2 , movementDetected = false;
			counterTimesHead = 0;
			isAbleToMoveHead = false;
			cameraUsed = 1;
			timeFaceRecognition.clear();
			initialTimeStarted=false;
			state1M = false;
			restart = false;
			firstImage = true;
			counterNoOneChosen = 0;
			impossibleAngle = 0;
			adjustBottleCenter = false;

			system("rosrun dynamic_reconfigure dynparam set naoqicamera_node \"{'source': 1, 'resolution': 1}\"");
			ros::Duration(1.0).sleep();
			//system("rosrun dynamic_reconfigure dynparam set naoqicamera_node resolution 1");
			//ros::Duration(1.0).sleep();

			actionlib::SimpleActionClient<naoqi_msgs::JointTrajectoryAction>ac("/joint_trajectory", true);
			ROS_INFO("Waiting for action server to start.");
			ac.waitForServer();
			ac.sendGoal(putHeadDown());
			bool finishedBeforeTimeout = ac.waitForResult(ros::Duration(10.0));
			if(finishedBeforeTimeout)
			{
					actionlib::SimpleClientGoalState state = ac.getState();
					ROS_INFO("Action finished: %s", state.toString().c_str());
			}
			else
			{
				ROS_INFO("Action did not finish before the time out.");
			}
		}
	}
}

// Subscriber main function. Creating the image transport, Action client and trajecctory_action nodes

int main(int argc, char **argv)
{
	//chooses camera as Bottom for the image_transport node.

	cameraUsed = 1;

	//Initate nodes

	ros::init(argc, argv, "spin_this_bottle");
	ros::NodeHandle nh;
	ros::Rate loop_rate(20);

	//Changes camera from top to bottom and from 320 * 240 to 640 * 480

	system("rosrun dynamic_reconfigure dynparam set naoqicamera_node \"{'source': 1, 'resolution': 1}\"");
	//ros::Duration(1.0).sleep();

	AC_SAY = new ac_say::ActionClientSay();

	// First words NAO says asking for someone(s) to play.

	/*
	AC_SAY->say("Time to spin the bottle my friends, who wanna play?");
	ros::Duration(0.7).sleep();
	AC_SAY->say("Maybe you in front of me");
	ros::Duration(0.1).sleep();
	AC_SAY->say("Wanna start spinning?");
	ros::Duration(0.1).sleep();
	*/
	/*actionlib::SimpleActionClient<naoqi_bridge_msgs::RunBehaviorAction> behaviorAC("/run_behavior", true);
	behaviorAC.waitForServer();
	naoqi_bridge_msgs::RunBehaviorGoal behaviorGoal;
	behaviorGoal.behavior = "bottlehello";
	behaviorAC.sendGoal(behaviorGoal);
	behaviorAC.waitForResult(ros::Duration(15.0));*/
	system("/opt/Aldebaran/Choregraphe\\ Suite\\ 2.1/bin/qicli --qi-url optimusprime.local call ALBehaviorManager.runBehavior User/bottlehello-75671f/behavior_1");
	system("/opt/Aldebaran/Choregraphe\\ Suite\\ 2.1/bin/qicli --qi-url optimusprime.local call ALMotion.setBreathEnabled Body 1");
	system("/opt/Aldebaran/Choregraphe\\ Suite\\ 2.1/bin/qicli --qi-url optimusprime.local call ALMotion.setBreathEnabled Head 0");

	//Nao puts its head looking down for the bottle.

	actionlib::SimpleActionClient<naoqi_msgs::JointTrajectoryAction>ac("/joint_trajectory", true);
	ROS_INFO("Waiting for action server to start.");
	ac.waitForServer();
	ac.sendGoal(putHeadDown());
	bool finishedBeforeTimeout = ac.waitForResult(ros::Duration(10.0));
	if(finishedBeforeTimeout)
	{
        	actionlib::SimpleClientGoalState state = ac.getState();
        	ROS_INFO("Action finished: %s", state.toString().c_str());
	}
	else
	{
		ROS_INFO("Action did not finish before the time out.");
	}
  	cv::namedWindow("view");
  	cv::namedWindow("Debug-view");
  	cv::startWindowThread();

  	//Start with the image transport nodes.

  	image_transport::ImageTransport it(nh);
  	image_transport::Subscriber sub = it.subscribe("camera/image_raw", 1, imageCallback);

  	ros::spin();
  	cv::destroyWindow("view");
  	cv::destroyWindow("Debug-view");
}
